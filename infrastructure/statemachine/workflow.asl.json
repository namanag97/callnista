{
    "Comment": "Workflow to orchestrate audio transcription and analysis",
    "StartAt": "TranscribeAudio",
    "States": {
      "TranscribeAudio": {
        "Type": "Task",
        "Comment": "Invoke Lambda function to transcribe audio from S3 using ElevenLabs",
        "Resource": "${LambdaTranscribeArn}",
        "Parameters": {
          "call_id.$": "$.call_id",
          "s3_bucket_name.$": "$.s3_bucket_name",
          "s3_object_key.$": "$.s3_object_key",
          "profile_id.$": "$.profile_id"
        },
        "ResultPath": "$.TranscriptionOutput",
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 3,
            "BackoffRate": 2.0
          },
          {
            "ErrorEquals": [
              "TranscriptionServiceUnavailableError"
            ],
            "IntervalSeconds": 5,
            "MaxAttempts": 5,
            "BackoffRate": 2.0
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [ "States.ALL" ],
            "Comment": "Catch all transcription errors",
            "ResultPath": "$.errorInfo",
            "Next": "HandleTranscriptionFailure"
          }
        ],
        "Next": "AnalyzeTranscript"
      },
      "HandleTranscriptionFailure": {
        "Type": "Task",
        "Comment": "Update status to TranscriptionFailed",
        "Resource": "${LambdaUpdateStatusArn}",
        "Parameters": {
          "call_id.$": "$.call_id",
          "status": "TranscriptionFailed",
          "error.$": "$.errorInfo"
        },
        "End": true
      },
      "AnalyzeTranscript": {
        "Type": "Task",
        "Comment": "Invoke Lambda function to analyze transcript using OpenAI",
        "Resource": "${LambdaAnalyzeArn}",
        "Parameters": {
          "call_id.$": "$.call_id",
          "profile_id.$": "$.profile_id"
        },
        "ResultPath": "$.AnalysisOutput",
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException",
              "States.Timeout"
            ],
            "IntervalSeconds": 3,
            "MaxAttempts": 3,
            "BackoffRate": 2.0
          },
          {
            "ErrorEquals": [
              "AnalysisServiceUnavailableError"
            ],
            "IntervalSeconds": 5,
            "MaxAttempts": 3,
            "BackoffRate": 1.5
          }
        ],
        "Catch": [
          {
            "ErrorEquals": [ "States.ALL" ],
            "Comment": "Catch all analysis errors",
            "ResultPath": "$.errorInfo",
            "Next": "HandleAnalysisFailure"
          }
        ],
        "Next": "UpdateFinalStatus"
      },
      "HandleAnalysisFailure": {
        "Type": "Task",
        "Comment": "Update status to AnalysisFailed",
        "Resource": "${LambdaUpdateStatusArn}",
        "Parameters": {
          "call_id.$": "$.call_id",
          "status": "AnalysisFailed",
          "error.$": "$.errorInfo"
        },
        "End": true
      },
      "UpdateFinalStatus": {
        "Type": "Task",
        "Comment": "Update status to Completed",
        "Resource": "${LambdaUpdateStatusArn}",
        "Parameters": {
          "call_id.$": "$.call_id",
          "status": "Completed",
          "transcription_id.$": "$.TranscriptionOutput.call_id",
          "analysis_id.$": "$.AnalysisOutput.call_id"
        },
        "End": true
      }
    }
}